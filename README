Funcionamiento y lógica del sistema de prioridades

El sistema de prioridades que implementamos en xv6 comienza asignando a cada proceso una prioridad inicial de 0, junto con un valor llamado boost, que se inicia en 1. En este esquema, un proceso con prioridad 0 tiene la mayor preferencia para ser ejecutado, por lo que se elige primero para ejecutarse. A medida que los procesos entran en la cola de ejecución, su prioridad aumenta en función del valor del boost.

Si la prioridad de un proceso llega a 9 , el boost se ajusta a -1, lo que hace que la prioridad comience a disminuir. Cuando un proceso recupera una prioridad de 0, el boost vuelve a ser 1. Esto garantiza que ningún proceso se quede siempre con una alta prioridad, permitiendo que todos tengan su turno para ejecutarse.

Explicación de las modificaciones realizadas

Añadimos un nuevo campo llamado priority en la estructura proc para almacenar la prioridad de cada proceso.
También agregamos un campo llamado boost, que se inicializa en 1 y se utiliza para ajustar cómo varía la prioridad del proceso a lo largo del tiempo.
Cada vez que se crea un proceso nuevo o uno entra a la cola de ejecución, las prioridades de los demás procesos son ajustadas según el valor de su boost.

Dificultades encontradas y soluciones implementadas

En las primeras pruebas, notamos que algunas prioridades no se actualizaban correctamente. Esto ocurría porque el sistema no estaba revisando bien el estado de los procesos. La solución fue ajustar el ciclo de actualización para que solo incluyera a los procesos activos y no a los que ya eran zombies.
También encontramos que los procesos con una prioridad baja a veces no se volvían a ejecutar, debido a condiciones de carrera. Para solucionarlo, implementamos una lógica que alterna el valor del boost.